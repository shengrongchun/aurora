{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","@keywords","@default","next","$S2==interpolatedstring","@eos","string","$S2==\"","$#==$S2","herestring","$1==$S2","comment","hereregexp"],"mappings":"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","file":"js/chunk-2d21f327.60adfe72.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['###', '###'],\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    ignoreCase: true,\r\n    tokenPostfix: '.coffee',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\r\n    keywords: [\r\n        'and', 'or', 'is', 'isnt', 'not', 'on', 'yes', '@', 'no', 'off',\r\n        'true', 'false', 'null', 'this',\r\n        'new', 'delete', 'typeof', 'in', 'instanceof',\r\n        'return', 'throw', 'break', 'continue', 'debugger',\r\n        'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally',\r\n        'class', 'extends', 'super',\r\n        'undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        'this': 'variable.predefined',\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // whitespace\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            // Comments\r\n            [/###/, 'comment', '@comment'],\r\n            [/#.*$/, 'comment'],\r\n            // regular expressions\r\n            ['///', { token: 'regexp', next: '@hereregexp' }],\r\n            [/^(\\s*)(@regEx)/, ['', 'regexp']],\r\n            [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\r\n            // delimiters\r\n            [/}/, {\r\n                    cases: {\r\n                        '$S2==interpolatedstring': { token: 'string', next: '@pop' },\r\n                        '@default': '@brackets'\r\n                    }\r\n                }],\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/0[0-7]+(?!\\d)/, 'number.octal'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[,.]/, 'delimiter'],\r\n            // strings:\r\n            [/\"\"\"/, 'string', '@herestring.\"\"\"'],\r\n            [/'''/, 'string', '@herestring.\\'\\'\\''],\r\n            [/\"/, {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: '@string.\"' }\r\n                    }\r\n                }],\r\n            [/'/, {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: '@string.\\'' }\r\n                    }\r\n                }],\r\n        ],\r\n        string: [\r\n            [/[^\"'\\#\\\\]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/#{/, {\r\n                    cases: {\r\n                        '$S2==\"': { token: 'string', next: 'root.interpolatedstring' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/[\"']/, {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/#/, 'string']\r\n        ],\r\n        herestring: [\r\n            [/(\"\"\"|''')/, {\r\n                    cases: {\r\n                        '$1==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }],\r\n            [/[^#\\\\'\"]+/, 'string'],\r\n            [/['\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\r\n            [/#/, 'string']\r\n        ],\r\n        comment: [\r\n            [/[^#]+/, 'comment',],\r\n            [/###/, 'comment', '@pop'],\r\n            [/#/, 'comment'],\r\n        ],\r\n        hereregexp: [\r\n            [/[^\\\\\\/#]+/, 'regexp'],\r\n            [/\\\\./, 'regexp'],\r\n            [/#.*$/, 'comment'],\r\n            ['///[igm]*', { token: 'regexp', next: '@pop' }],\r\n            [/\\//, 'regexp'],\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":""}